apiVersion: apps/v1
kind: Deployment
metadata:
  name: blog-client
  namespace: blog-app
  labels:
    app: blog-app
    component: client
    tier: frontend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: blog-app
      component: client
  template:
    metadata:
      labels:
        app: blog-app
        component: client
        tier: frontend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "80"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 101  # nginx user
        fsGroup: 101
      containers:
      - name: blog-client
        image: blog-app/client:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        
        # Environment Variables t·ª´ ConfigMap
        envFrom:
        - configMapRef:
            name: blog-app-config
        
        env:
        - name: REACT_APP_API_URL
          valueFrom:
            configMapKeyRef:
              name: blog-app-config
              key: REACT_APP_API_URL
        - name: REACT_APP_ENV
          valueFrom:
            configMapKeyRef:
              name: blog-app-config
              key: REACT_APP_ENV
        
        # üè• HEALTH PROBES cho React/Nginx Frontend
        livenessProbe:
          httpGet:
            path: /
            port: http
            scheme: HTTP
            httpHeaders:
            - name: Host
              value: localhost
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /
            port: http
            scheme: HTTP
            httpHeaders:
            - name: Host
              value: localhost
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        
        # Startup probe cho frontend build
        startupProbe:
          httpGet:
            path: /
            port: http
            scheme: HTTP
            httpHeaders:
            - name: Host
              value: localhost
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 12
          successThreshold: 1
        
        # Resource Management
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        
        # Security Context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 101  # nginx user
          capabilities:
            drop:
              - ALL
            add:
              - NET_BIND_SERVICE
        
        # Volume mounts
        volumeMounts:
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-run
          mountPath: /var/run
        - name: nginx-temp
          mountPath: /tmp
      
      # Volumes
      volumes:
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}
      - name: nginx-temp
        emptyDir: {}
      
      # Pod-level settings
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      
      # Node selection
      nodeSelector:
        kubernetes.io/os: linux
      
      # Anti-affinity ƒë·ªÉ spread pods
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - client
              topologyKey: kubernetes.io/hostname
