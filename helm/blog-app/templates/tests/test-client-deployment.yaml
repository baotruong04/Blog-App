{{/*
Test to verify the client deployment renders correctly
*/}}
apiVersion: v1
kind: Pod
metadata:
  name: "{{ include "blog-app.fullname" . }}-test-client-deployment"
  namespace: {{ .Values.namespace.name }}
  labels:
    {{- include "blog-app.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  restartPolicy: Never
  containers:
  - name: test-client-deployment
    image: busybox:1.28
    command: ['sh', '-c']
    args:
    - |
      set -e
      echo "Testing client deployment..."
      
      # Check if client deployment exists
      kubectl get deployment {{ include "blog-app.fullname" . }}-client -n {{ .Values.namespace.name }}
      echo "✓ Client deployment exists"
      
      # Check deployment has correct labels
      kubectl get deployment {{ include "blog-app.fullname" . }}-client -n {{ .Values.namespace.name }} -o jsonpath='{.metadata.labels.app\.kubernetes\.io/component}' | grep -q "client"
      echo "✓ Client deployment has correct component label"
      
      # Check deployment has correct image
      kubectl get deployment {{ include "blog-app.fullname" . }}-client -n {{ .Values.namespace.name }} -o jsonpath='{.spec.template.spec.containers[0].image}' | grep -q "{{ .Values.client.image.repository }}"
      echo "✓ Client deployment has correct image"
      
      # Check deployment has health probes
      kubectl get deployment {{ include "blog-app.fullname" . }}-client -n {{ .Values.namespace.name }} -o jsonpath='{.spec.template.spec.containers[0].startupProbe}' | grep -q "httpGet"
      echo "✓ Client deployment has startup probe"
      
      kubectl get deployment {{ include "blog-app.fullname" . }}-client -n {{ .Values.namespace.name }} -o jsonpath='{.spec.template.spec.containers[0].readinessProbe}' | grep -q "httpGet"
      echo "✓ Client deployment has readiness probe"
      
      kubectl get deployment {{ include "blog-app.fullname" . }}-client -n {{ .Values.namespace.name }} -o jsonpath='{.spec.template.spec.containers[0].livenessProbe}' | grep -q "httpGet"
      echo "✓ Client deployment has liveness probe"
      
      echo "Client deployment test PASSED!"
    volumeMounts:
    - name: kubectl-config
      mountPath: /root/.kube
      readOnly: true
  volumes:
  - name: kubectl-config
    secret:
      secretName: kubectl-config
      optional: true
